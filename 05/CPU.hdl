// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // TODO: implement
    Not(in=instruction[15], out=isA);
    Not(in=isA, out=isC);
    
    And(a=isC, b=instruction[5], out=ALUtoA);   

    // Define Aregister
    Mux16(a=instruction,b=aluFb,sel=ALUtoA,out=outMu);

    // ARegister
    Or(a=ALUtoA,b=isA,out=loadA)
    ARegister(in=outMu,load=loadA,out=A,out=addressM);

    // Define mnemonic(A or M)
    Mux16(a=A,b=inM,sel=instruction[12],out=AM);

    // DRegister
    DRegister(in=aluFb,load=instruction[4],out=D);

    // ALU
    ALU(x=D,y=AM,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=outM1);
    DFF16(in=outM1,out=outM,out=aluFb);

    // PC
    Or(a=instruction[0],a=instruction[1],out=o1);
    Or(a=instruction[2],a=o2,out=isJump);
    PC(in=A,load=isJump,inc=true,reset=reset,out=PC[0..14]);
}